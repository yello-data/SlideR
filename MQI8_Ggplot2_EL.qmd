---
title: "Ggplot2"
subtitle: "Metodologia Quantitativa (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Metodologia Quantitativa (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Summary

- Facet
- Coordenades
- Escales
- Etiquetes i temes

# Warm up {background-color="#e8e8e8"}

## R learning curve

```{r}
library(dplyr)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(forcats)
library(readr)
library(lubridate)
theme_set(theme_minimal())
cens_gc <- readRDS("data/cens_gc.rds")
rendacs <- readRDS("data/rendacs.rds")
accidents <- readRDS("data/accidents.rds")
municipi <- readRDS("data/municipi.rds")
lloguer_any <- readRDS("data/lloguer_any.rds")
festivals <- readRDS("data/festivals.rds")
elecc19 <- readRDS("data/elecc19.rds")

rlc <- tibble(class = 1:8,
             knowledge = (1:8)^3)
lesson <- 7
rlc |> 
  ggplot(aes(x = class, y = knowledge)) +
  geom_line() +
  geom_point(data = rlc |> 
               filter(class == lesson), col = "red", size = 3)
```



# Capes {background-color="#e8e8e8"}

## Capes bàsiques

Gairebé sempre, un ggplot consisteix en tres capes^[Les capes es separen amb `+`, no amb una pipe!!!!]:

- 1. Marc de dades 
- 2. Estètics
- 3. Geometria

```{r echo = T, eval = F}
#| code-line-numbers: 4-7
df |> 
  ggplot(aes(aestethics)) +
  geometry() +
  facet() +
  scale() +
  theme() +
  ...
```



## Capes opcionals

Opcionalment, afegim més capes, com :

- 4. Facet
- 5. Coordenades
- 6. Escales
- 7. Temes
- 8. Etc


# Facet {background-color="#e8e8e8"}


## Facet {.scrollable}

Col: `facet_wrap(facets=vars(v), ncol=1)`

```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  mutate(pp_per = pp / total_votantes * 100) |> 
  ggplot(aes(x = pp_per)) +
  geom_histogram() +
  facet_wrap(facets = vars(nombre_de_provincia), ncol = 1)
```

## Facet {.scrollable}

Files: `facet_wrap(facets=vars(v), nrow=1)`

```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  mutate(erc_per = erc_sobiranistes / total_votantes * 100,
         psoe_per = psoe / total_votantes * 100,
         hab = if_else(poblacion > 15000, "Ciutat", "Poble")) |> 
  ggplot(aes(x = erc_per, y = psoe_per, col = hab)) +
  geom_point() +
  facet_wrap(facets = vars(nombre_de_provincia), 
             nrow = 1, scales = "free")
```


## Facet {.scrollable}

None: `facet_wrap(facets=vars(v))` ([CatSalut](https://analisi.transparenciacatalunya.cat/Salut/Dades-di-ries-de-COVID-19-per-comarca/c7sd-zy9j))

```{r eval = F, echo = T}
#| code-fold: true
library(lubridate)
covid <- read_csv("data/Dades_di_ries_de_COVID-19_per_comarca.csv")
covid |> 
  filter(NOM != "Sense especificar") |> 
  mutate(DATA = as.Date(DATA, format = "%d/%m/%Y"),
         MONTH = month(DATA),
         YEAR = year(DATA)) |> 
  group_by(NOM, MONTH, YEAR) |> 
  summarize(casos = sum(CASOS_CONFIRMAT)) |> 
  mutate(DATE = as.Date(paste0("01/", MONTH, "/", YEAR), format = "%d/%m/%Y")) |> 
  ggplot(aes(x = DATE, y = casos)) +
  geom_line() +
  facet_wrap(facets = vars(NOM), scales = "free")
```

```{r echo = F, eval = T, fig.height=4, fig.width=9}
covid <- readRDS("data/covid.rds")
covid |> 
  filter(NOM != "Sense especificar") |> 
  mutate(DATA = as.Date(DATA, format = "%d/%m/%Y"),
         MONTH = month(DATA),
         YEAR = year(DATA)) |> 
  group_by(NOM, MONTH, YEAR) |> 
  summarize(casos = sum(CASOS_CONFIRMAT)) |> 
  mutate(DATE = as.Date(paste0("01/", MONTH, "/", YEAR), format = "%d/%m/%Y")) |> 
  ggplot(aes(x = DATE, y = casos)) +
  geom_line() +
  facet_wrap(facets = vars(NOM), scales = "free")
```

## Facet {.scrollable}

Files i columnes en una graella: `facet_grid()`
```{r echo = T}
#| code-fold: true
accidents |>
  ggplot(aes(x = edat)) +
  geom_histogram() +
  facet_grid(rows = vars(descripcio_dia_setmana),
             cols = vars(descripcio_torn))
```



# Coordenades {background-color="#e8e8e8"}

## Coordenades {.scrollable}

Girar eixos: `coord_flip()`

:::: {.columns}

::: {.column width="50%"}
```{r echo = T, fig.height=5, fig.width=6}
#| code-fold: true
elecc19 |>
  filter(nombre_de_comunidad == "Andalucía") |> 
  mutate(cs_per = cs / poblacion * 100) |> 
  ggplot(aes(x = fct_reorder(nombre_de_provincia, cs_per), y = cs_per)) +
  geom_violin()
```

:::

::: {.column width="50%"}
```{r echo = T, fig.height=5, fig.width=6}
#| code-fold: true
elecc19 |>
  filter(nombre_de_comunidad == "Andalucía") |> 
  mutate(cs_per = cs / poblacion * 100) |> 
  ggplot(aes(x = fct_reorder(nombre_de_provincia, cs_per), y = cs_per)) +
  geom_violin() +
  coord_flip()
```

:::

::::


## Coordenades {.scrollable}

Canviar límits: `coord_cartesian(ylim = c(30,40))`

:::: {.columns}

::: {.column width="50%"}
```{r echo = T}
#| code-fold: true
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point()
```
:::

::: {.column width="50%"}
```{r echo = T}
#| code-fold: true
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point() +
  coord_cartesian(ylim = c(30, 40))
```

:::

::::

Més fàcil: `ylim(30,40)` / `xlim(30000,70000)`


# Escales {background-color="#e8e8e8"}

## Escales X i Y {.scrollable}

Funcions d'escala: 

- `scale_x_` or `scale_y_`
- `discrete()` or `continuous()` (and others).

Arguments de la funció:

- `breaks`: Posició dels talls.
- `labels`: Etiquetes dels talls.
- `name`: Títol d'eix.
- `limits`: Límits de l'escala.

## Escales X i Y {.scrollable}

Num: `scale_x_continuous()`

```{r echo = T}
#| code-fold: true
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point() +
    scale_x_continuous(
    breaks = c(20000, 50000, 80000), 
    labels = c("20k", "50k", "80k")
  )
```

## Escales X i Y {.scrollable}

Cat: `scale_x_discrete()`

```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  ggplot(aes(x = nombre_de_provincia, y = numero_de_mesas)) +
  geom_col() +
  scale_x_discrete(labels = c("BCN", "GIR", "LLEI", "TGN"),
                   name = "Província")
```


## Escales X i Y {.scrollable}

Percentatges: Numèrica, de 0 a 1.

```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  mutate(erc_per = erc_sobiranistes / total_votantes,
         psoe_per = psoe / total_votantes,
         hab = if_else(poblacion > 15000, "Ciutat", "Poble")) |> 
  ggplot(aes(x = erc_per, y = psoe_per, col = hab)) +
  geom_point() +
  scale_y_continuous(labels = scales::label_percent())
```



## Escales de color i fill {.scrollable}

Funció d'escala: **Brewer**.

- `scale_color_brewer()`
- `scale_fill_brewer()`

Arguments de la funció (veure ajuda):

- `type`: `"seq"`, `"div"` or `"qual"`.
- `palette`: `"Greens"`, `"Set1"`, `"Spectral"` (1, 2...).
- `direction`: `1` or `-1`.


## Escales de color i fill {.scrollable}

Funció d'escala: **Brewer** ([see web](https://colorbrewer2.org){target="_blank"}).

```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  ggplot(aes(x = nombre_de_provincia, y = numero_de_mesas,
             fill = nombre_de_provincia)) +
  geom_col() +
  scale_fill_brewer(palette = "Accent")
```


## Escales de color i fill {.scrollable}

Funció d'escala: **Gradient**^[`scale_xxx_gradient2()` inclou `mid` i `midpoint`.].

- `scale_color_gradient()`
- `scale_fill_gradient()`

Arguments de la funció:

- `low`: color of the lowest value.
- `high`: color of the highest value. 



## Escales de color i fill {.scrollable}

Funció d'escala: **Gradient**.


```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  mutate(erc_per = erc_sobiranistes / total_votantes,
         psoe_per = psoe / total_votantes,
         pp_per = pp / total_votantes) |> 
  ggplot(aes(x = erc_per, y = psoe_per, col = pp_per)) +
  geom_point() +
  scale_color_gradient(low = "white", high = "darkblue")
```


## Escales de color i fill {.scrollable}

Funció d'escala: **Manual**.

- `scale_color_manual()`
- `scale_fill_manual()`

Arguments de la funció:

- `values`: color de cada categoria.
- `labels`: nom de cada categoria.


## Escales de color i fill {.scrollable}

Funció d'escala: **Manual**.

```{r echo = T}
#| code-fold: true
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  mutate(erc_per = erc_sobiranistes / total_votantes,
         psoe_per = psoe / total_votantes,
         hab = if_else(poblacion > 15000, "Ciutat", "Poble")) |> 
  ggplot(aes(x = erc_per, y = psoe_per, col = hab)) +
  geom_point() +
  scale_color_manual(values = c("orange", "darkgreen"),
                  labels = c("Ciutat", "Poble"))
  
```


## Escales de color i fill {.scrollable}

Webs útils pels colors:

- [R colors](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf){target="_blank"}
- [Html color codes](https://htmlcolorcodes.com){target="_blank"}
- [Color Hex](https://www.color-hex.com){target="_blank"}


## Altres escales {.scrollable}

- `scale_size()`
- `scale_shape()`
- `scale_alpha()`
- `scale_linewidth()`



# Etiquetes i temes

## Etiquetes

`labs()`

- `title`, `subtitle`, `caption`...
- `x`, `y`, `col`, `fill`...


## Temes de ggplot2 {.scrollable}

`theme_minimal()`, `theme_light()`...

```{r echo = T}
#| code-fold: true
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point() +
  theme_classic()
```


## Temes Ghibli {.scrollable}

Totes les paletes a: `ghibli::ghibli_palettes`

```{r}
library(ghibli)
rendacs |> 
  filter(nom_districte == "L'Eixample") |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_barri)) +
  geom_point() +
  scale_color_ghibli_d(name = "TotoroMedium",
                       direction = -1)
```


## Altres paquetes de temes {.scrollable}

WSJ, The Economist, Excel... `ggthemes`.

```{r echo = T}
#| code-fold: true
library(ggthemes)
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point() +
  scale_color_wsj() +
  theme_wsj()
```





## Modificar temes {.scrollable}

Al principi, consumeix molt de temps.

Veure info a [ggplot2](https://ggplot2.tidyverse.org/reference/theme.html){target="_blank"}.



# Exemple d'un ggplot complet {background-color="#e8e8e8"}

## Exemple {.scrollable}

```{r echo = T}
#| code-fold: true
options(scipen=999) #removes scientific notation
elecc19 |> 
  filter(nombre_de_comunidad == "Cataluña") |> 
  transmute(poblacion, 
            ERC = erc_sobiranistes / total_votantes,
            PSC = psoe / total_votantes) |> 
  pivot_longer(ERC:PSC, names_to = "partit", values_to = "perc") |> 
  ggplot(aes(x = log10(poblacion), y = perc, col = partit)) +
  geom_point(size = 2, alpha = 0.6, show.legend = F) +
  facet_wrap(facets = vars(partit), 
             nrow = 1) +
  scale_color_manual(values = c("gold2", "firebrick2")) +
  scale_y_continuous(labels = scales::label_percent(), name = "Percentatge de vot") +
  scale_x_continuous(name = "Població", breaks = c(2, 3, 4, 5, 6),
                     labels = c(100, 1000, 10000, 100000, 1000000)) +
  labs(title = "Vot a ERC i PSC a Catalunya",
       subtitle = "Dades de vot per municipi a les eleccions generals de 2019",
       caption = "Font: Ministeri de l'Interior") +
  theme(text = element_text(size = 15))
```



## Important

Feu servir Cheat Sheets & Manuals:

- [Cheat Sheet](https://posit.co/resources/cheatsheets/){target="_blank"}
- [R4DS: Data visualization](https://r4ds.hadley.nz/data-visualize.html){target="_blank"}
- [R4DS: Visualize](https://r4ds.hadley.nz/visualize.html){target="_blank"}
- [ggplot2 package info](https://ggplot2.tidyverse.org/reference/scale_continuous.html){target="_blank"}
- [ggplot2: Elegant graphics for data analysis](https://ggplot2-book.org/index.html){target="_blank"}
- Google it! E.g. "Geom tile covid examples".



## Més vizzs

- [Datawrapper](https://xarxanet.org/informatic/recursos/com-fer-un-grafic-interactiu-amb-datawrapper)


