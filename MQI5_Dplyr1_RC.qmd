---
title: "Dplyr"
subtitle: "Metodologia Quantitativa (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Metodologia Quantitativa (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Sumari

- Pipe
- Funcions dplyr de fila
- Funcions dplyr de columna
- Transformar variables

# Warm up {background-color="#e8e8e8"}

## Corba d'aprenentatge

```{r}
library(dplyr)
rlc <- tibble(class = 1:8,
             knowledge = (1:8)^3)
class <- 3
plot(rlc$class, rlc$knowledge)
points(rlc$class[class], rlc$knowledge[class], col = "red")
```

## RStudio workflow

**Carregar paquets**

```{r echo = T, message=F, warning=F}
library(dplyr)
library(ggplot2)
library(stringr)
```

![](img/r-packages.png){style="float:center;" width="650"}



# Pipe {background-color="#e8e8e8"}

## Pipe

Una funció
```{r eval = F, echo = TRUE}
#| code-line-numbers: "|1|2|3|4-5"
f(d$v)
f(d, v)
d |> f(v)
1:100 |> 
   sample(4)
```

Vàries funcions
```{r eval = F, echo = TRUE}
#| code-line-numbers: "|1|2-4"
f1(f1(d, v1), v2)
d |> 
  f1(v1) |> 
  f2(v2)
```



## Pipe

Sense pipe
```{r eval = F, echo = TRUE}
go_to_upf(take_transport(get_dressed(get_out_of_bed(wake_up(me,
time = "8:30"), side = "left"), pants = TRUE, shirt = TRUE), 
bus = TRUE, metro = FALSE), mqi = FALSE, bar = TRUE)
```

Amb pipe

```{r eval = F, echo = TRUE}
me |> 
  wake_up(time = "8:30") |> 
  get_out_of_bed(side = "left") |> 
  get_dressed(pants = TRUE, shirt = TRUE) |> 
  take_transport(bus = TRUE, metro = FALSE) |> 
  go_to_upf(mqi = FALSE, bar = TRUE)
```

Exemple inspirat de [here](https://twitter.com/hadleywickham/status/1359852563726819332?s=20&t=J8qesZb3u9EAwVKMYMgh1Q) i [here](https://evalsp21.classes.andrewheiss.com/projects/01_lab/slides/01_lab.html#116).


# Funcions dplyr de fila {background-color="#e8e8e8"}

## Filter

Redueix el nombre de files en base a un criteri determinat

```{r echo = T, eval = F}
df |> 
  filter(logic_vector)
```

- És sempre el resultat d'un vector lògic.
- Es pot usar `&` (AND), `|` (OR), `!` (NOR).


## Arrange

- Ordena de menys a més...

```{r echo = T, eval = F}
df |> 
  arrange(vector)
```

- ...o de més a menys.

```{r echo = T, eval = F}
df |> 
  arrange(desc(vector))
```

## Count

- Fa un recompte del nombre de categories d'un vector^[Aquest vector és normalment un vector de caràcter o un factor, però també podria ser un vector, per exemple, numèric amb poques categories.]...

```{r echo = T, eval = F}
df |> 
  count(vector)
```

- ...i ordena els resultats.

```{r echo = T, eval = F}
df |> 
  count(vector, sort = T)
```


# Funcions dplyr de columna {background-color="#e8e8e8"}

## Select

- Selecciona vectors.

```{r echo = T, eval = F}
df |> 
  select(vector1, vector4, vector6:vector9)
```

- Elimina vectors.

```{r echo = T, eval = F}
df |> 
  select(-vector2)
```

## Rename

Reanomena el nom del vector.

```{r echo = T, eval = F}
df |> 
  rename(nom_nou = Nom.Vector.Antic)
```



## Mutate {.scrollable}

- **Modifica** els valors d'un vector^[Modifica el valor del vector perquè guarda el resultat de l'operació en el mateix vector.]...

```{r echo = T, eval = F}
df |> 
  mutate(vector5 = vector5 * 100)
```

- ... o bé crea un **nou** vector^[Crea un nou vector perquè la operació es guarda en un vector que no existia prèviament en el marc de dades.].

```{r echo = T, eval = F}
df |> 
  mutate(nou_vector = vector5 + vector6)
```

- Es poden combinar vàries operacions.

```{r echo = T, eval = F}
df |> 
  mutate(vector5 = vector5 * 100,
         nou_vector = vector5 + vector6)
```

