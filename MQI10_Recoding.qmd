---
title: "Recoding"
subtitle: "Quantitative Methodology (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Quantitative Methodology (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Summary

- Boolean operations
- Relabel functions
- As factor
- As functions

# Warm up {background-color="#e8e8e8"}

## R learning curve

```{r}
library(dplyr)
library(ggplot2)
festivals <- readRDS("data/festivals.rds")
lloguer_any <- readRDS("data/lloguer_any.rds")
cens_gc <- readRDS("data/cens_gc.rds")
municipi <- readRDS("data/municipi.rds")
rlc <- tibble(class = 1:8,
             knowledge = (1:8)^3)
lesson <- 8
rlc |> 
  ggplot(aes(x = class, y = knowledge)) +
  geom_line(size = 1) +
  geom_point(data = rlc |> 
               filter(class == lesson), col = "red") +
  annotate("text", x = 4.5, y = 375, label = "You are here!") +
  geom_curve(aes(x = 5, xend = 7.8, y = 400, yend = 515),
             arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
             color = "gray40", curvature = -0.3) +
  theme_minimal() +
  labs(x = "Class number", y = "Knowledge", title = "The R Knowledge curve")
```

## Hall of fame

Best plots!



## RStudio workflow

**Load packages.**

```{r echo = T, message=F, warning=F}
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
library(forcats)
library(readxl)
library(vdemdata)
```

![](img/r-packages.png){style="float:center;" width="650"}




# Functions and operators {background-color="#e8e8e8"}


## Boolean operators


- **AND** (`&`): TRUE if all conditions are met.
- **OR** (`|`): TRUE if any condition is met.
- **NOT** (`!`): TRUE if conditions are not met.

```{r echo = FALSE}
#| fig-column: margin
knitr::include_graphics("img/booleans.png")
```


## Recoding functions

When we recode variables, we lose information^[Search here for the [dplyr cheatsheet](https://posit.co/resources/cheatsheets/){target="_blank"}].

| To      | Function                                          |
|------------|-------------------------------------------------|
| Binary    | `if_else()`                                     |
| Categorical | `case_when()`, `case_match()`                   |
| Ordinal    | `factor()`                                      |
| Others     | `as.numeric()`, `as.character()`, `as.Date()`, etc. |


# Relabel {background-color="#e8e8e8"}


## If_else

- To a dichotomous / binary / dummy variable.

```{r echo = T, eval = F}
df |> 
  mutate(new_name = if_else(logic operation, true, false))
```




## Case_when

```{r echo = T, eval = F}
df |> 
  mutate(new_var = case_when(logic operation ~ "C1",
                             logic operation ~ "C2",
                             logic operation ~ "C3",
                             ...,
                             .default ~ "CN"))
```



## Case_match

```{r echo = T, eval = F}
df |> 
  mutate(new_var = case_match(variable,
                              "c1" ~ "C1",
                              "c2" ~ "C2",
                              "c3" ~ "C3",
                             ...,
                             .default = "CN"))
```



## Factor

```{r echo = T, eval = F}
df |> 
  mutate(new_vector = factor(wb$income_group, 
                             ordered = TRUE,
                             [levels o labels = ...]))
```


## As functions

- `as.numeric(vector)`
- `as.factor(vector)`
- `as.character(vector)`
- `as.integer(vector)`
- `as.Date(vector)`



