---
title: "Ggplot2 I"
subtitle: "Metodologia Quantitativa I (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Metodologia Quantitativa I (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Sumari

- El sistema de capes
- Estètics
- Geometries

# Warm up {background-color="#e8e8e8"}

## R learning curve

```{r}
library(dplyr)
library(ggplot2)
library(forcats)
theme_set(theme_minimal())
cens_gc <- readRDS("data/cens_gc.rds")
rendacs <- readRDS("data/rendacs.rds")
accidents <- readRDS("data/accidents.rds")
municipi <- readRDS("data/municipi.rds")
lloguer_any <- readRDS("data/lloguer_any.rds")
festivals <- readRDS("data/festivals.rds")
elecc19 <- readRDS("data/elecc19.rds")

rlc <- tibble(class = 1:8,
             knowledge = (1:8)^3)
class <- 6
plot(rlc$class, rlc$knowledge)
points(rlc$class[class], rlc$knowledge[class], col = "red")
```



## Fet amb ggplot2

- [Visuals](https://www.jordimas.cat/courses/dataanalysis_en/visualize/data_analysis_en_visualization/){target="_blank"}
- [Extensions](https://exts.ggplot2.tidyverse.org/gallery/){target="_blank"}
- [Cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf){target="_blank"}

# El sistema de capes {background-color="#e8e8e8"}

## Capes bàsiques

Gairebé sempre, una gràfica creada amb _ggplot2_ consisteix en **tres capes**^[Les capes es separen amb `+`, no amb pipe!!!!]:

- 1. Marc de dades
- 2. Estètics
- 3. Geometria

```{r echo = T, eval = F}
df |> 
  ggplot(aes(estètics)) +
  geometria()
```



## Capes opcionals

Opcionalment, afegim més capes com per exemple:

- 4. Facet
- 5. Coordenades
- 6. Escales
- 7. Tema
- 8. Etc


## Exemple amb capes

Una gràfica totalment equipada amb capes.

```{r echo = T, eval = F}
bins |> 
  ggplot(aes(x = pvote, y = n, fill = type)) +
  geom_bar(stat = "identity", show.legend = F) + 
  geom_hline(yintercept = 0, size = 0.3) +
  scale_fill_manual(values = c("grey65", "grey35")) +
  facet_share(~type, dir = "h", scales = "free", reverse_num = TRUE) +
  coord_flip() +
  labs(x = NULL, fill = NULL, y = "Vote") +
  theme(panel.background = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 16),
        text = element_text(size = 15),
        axis.line.x = element_line(size = 0.3),
        axis.title.x = element_text(vjust=125, size = 14))
```



# Estètics {background-color="#e8e8e8"}

## Coordenades cartesianes

- Partim de dues dimensions: `x` i `y`.

```{r echo = F, eval = T}
tibble(x = 1:100,
       y = 1:100) |> 
  ggplot(aes(x = x, y = y)) +
  theme_classic()
```


## Estètics {.scrollable}

A dins d'`aes()`, indica què representa cada variable:

```{r echo = T, eval = F}
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point()
```


:::: {.columns}

::: {.column width="60%"}
```{r echo = F, eval = T}
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point()
```

:::

::: {.column width="40%"}

- `x`: variable eix horitzontal.
- `y`: variable eix vertical.
- `col`: color de la geometria.

:::

::::


## Estètics vs. atributs {.scrollable}

:::: {.columns}

::: {.column width="50%"}

Color com a estètic
```{r echo = T}
rendacs |> 
  ggplot(aes(x = import_euros, 
             y = index_gini, 
             col = nom_districte)) +
  geom_point()
```

:::

::: {.column width="50%"}
Color com a atribut
```{r echo = T}
rendacs |> 
  ggplot(aes(x = import_euros, 
             y = index_gini)) +
  geom_point(col = "red")
 
```
:::

::::



## Estètics vs. atributs {.scrollable}

**Estètics**: Representen una variable. Sempre a dins de la funció `aes()`. E.g.:

- `x = gdp`
- `col = continent`

**Atributs**: Representen característiques de geometria. Es posen fora de `aes()`, normalment a la funció `geom_xxx()`. E.g.:

- `col = "red"`
- `size = 2`


## Estètics vs. atributs {.scrollable}

Tipus d'atributs:

- `size`: mida de la geometria.
- `alpha`: transparència.
- `text`: noms.
- `labels`: etiquetes.
- `fill`: Per barres, polígons i coses que es pinten.
- `shape`: Principalment per punts.
- `linetype` / `lty`: Per línies.


# Geometries {background-color="#e8e8e8"}

## Geometries

- `geom_bar()`
- `geom_col()`
- `geom_point()`
- `geom_boxplot()`
- `geom_smooth()`
- ... fins a 35 geometries!

# Una variable categòrica {background-color="#e8e8e8"}

## Diagrama de barres (I) {.scrollable}

Counts, etc.: `geom_bar()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(x = nom_districte)) +
  geom_bar()
```


:::{.aside}
Extra: `coord_flip()`
:::

# Una variable numèrica {background-color="#e8e8e8"}

## Histograma {.scrollable}

Casos per interval de dades: `geom_histogram()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(x = hora_dia)) +
  geom_histogram(bins = 24)
```

:::{.aside}
Extra: `fill`
:::

## Diagrama de densitat {.scrollable}

Quan tenim molta info numèrica: `geom_density()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(x = hora_dia)) +
  geom_density()
```

:::{.aside}
Extra: `alpha`, `fill`, `col`
:::


## Dot plot {.scrollable}

Semi-contínua, pocs casos (~100): `geom_dotplot()`

```{r echo = T, fig.width=8, fig.height=5}
#| code-fold: true
accidents |> 
  filter(nom_barri == "el Camp de l'Arpa del Clot") |> 
  ggplot(aes(x = hora_dia)) +
  geom_dotplot()
```

:::{.aside}
Extra: `fill`.
:::


# Dues variables categòriques {background-color="#e8e8e8"}

## Diagrama de barres (II) {.scrollable}

Les barres s'omplen (fill) amb una variable Cat: `geom_bar()`

```{r echo = T}
#| code-fold: true
accidents |>
  ggplot(aes(x = nom_districte, fill = descripcio_torn)) +
  geom_bar(position = "fill")
```



# Una categòrica, una numèrica {background-color="#e8e8e8"}


## Diagrama de barres (III) {.scrollable}

Variable num. a les `y` (no un count): `geom_col()`

```{r echo = T}
#| code-fold: true
municipi |> 
  ggplot(aes(x = comarca, y = superficie_km2)) +
  geom_col()
```



## Diagrama de caixes (I) {.scrollable}

Mostra la mediana i l'IQR: `geom_boxplot()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(y = edat)) +
  geom_boxplot()
```

:::{.aside}
Extra: `x`, `fill`
:::

## Diagrama de caixes (II) {.scrollable}

```{r echo = T}
#| code-fold: true
elecc19 |>
  filter(nombre_de_comunidad == "Andalucía") |> 
  mutate(cs_per = cs / poblacion * 100) |> 
  ggplot(aes(x = nombre_de_provincia, y = cs_per)) +
  geom_boxplot()
```

## Diagrama de violins (I) {.scrollable}

Semblant a un diagrama de densitat: `geom_violin()`

```{r echo = T}
#| code-fold: true
elecc19 |>
  filter(nombre_de_comunidad == "Andalucía") |> 
  mutate(cs_per = cs / poblacion * 100) |> 
  ggplot(aes(x = fct_reorder(nombre_de_provincia, cs_per), y = cs_per)) +
  geom_violin() +
  coord_flip()
```


## Diagrama de violins (II) {.scrollable}

```{r echo = T}
#| code-fold: true
rendacs |> 
  ggplot(aes(x = fct_reorder(nom_districte, import_euros), y = import_euros)) +
  geom_violin() +
  coord_flip()
```


## Punts i text {.scrollable}

Per percentatges: `geom_point() + geom_text()`

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(nom_districte) |>
  summarize(preu_m2 = round(mean(preu_m2, na.rm = T), 1)) |> 
  ggplot(aes(x = fct_reorder(nom_districte, preu_m2), y = preu_m2)) +
  geom_point(size = 10, col = "darkblue") +
  geom_text(aes(label = preu_m2), col = "white") +
  coord_flip() +
  theme_minimal() +
  labs(x = NULL, y = NULL)
```



# Variable numèrica i temps {background-color="#e8e8e8"}

## Diagrama de línies (I) {.scrollable}

Línia temporal: `geom_line()`

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(any) |> 
  summarize(preu = mean(preu, na.rm = T)) |> 
  ggplot(aes(x = any, y = preu)) +
  geom_line()
```


## Diagrama de línies (II) {.scrollable}

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(any, nom_districte) |> 
  summarize(preu = mean(preu, na.rm = T)) |> 
  ggplot(aes(x = any, y = preu, col = nom_districte)) +
  geom_line()
```

:::{.aside}
Extra: `lty`
:::


## Diagrama de línies: Exemple 1

![](img/dcd-fem.png)

Tot el codi es pot trobar [aquí](https://www.jordimas.cat/courses/fiiei_cat/politics/fonts_indicadors_cat_binaria/#fig:fem-world){target="_blank"}.



## Diagrama de línies: Exemple 1

![](img/demfall-gdp.png)
Article [here](https://www.jordimas.cat/post/2022-03-10-vdemfall/){target="_blank"} | Code [here](https://www.jordimas.cat/post/2022-03-10-vdemfall/index_files/figure-html/gdp-1.png){target="_blank"}



## Path (I) {.scrollable}

Dues variables numèriques en el temps: `geom_path()`

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(any, nom_districte) |> 
  summarize(preu = mean(preu, na.rm = T),
            preu_m2 = mean(preu_m2, na.rm = T)) |> 
  ggplot(aes(x = preu_m2, y = preu, col = nom_districte,
             alpha = any)) +
  geom_path(size = 1.2)
```


## Path. Exemple {.scrollable}

![](img/kuznets-usa.png)

El codi es pot trobar [aquí](https://www.jordimas.cat/courses/fiiei_cat/socioeconomics/fonts_indicadors_cat_kuznets/#fig:kuznets-usa){target="_blank"}.


# Dues numèriques {background-color="#e8e8e8"}

## Points (I) {.scrollable}

Two numeric variables: `geom_point()`

```{r echo = T}
#| code-fold: true
rendacs |>  
  ggplot(aes(x = import_euros, y = index_gini)) +
  geom_point(col = "darkgreen")
```

:::{.aside}
Extra: `col`, `size`
:::



## Points (II)

```{r echo = T}
#| code-fold: true
accidents |> 
  filter(longitud > 0) |> 
  ggplot(aes(x = longitud, y = latitud)) +
  geom_point() 
```

## Jitter {.scrollable}

Per nombres discrets o overplotting: `geom_jitter()` 

```{r echo = T}
#| code-fold: true
accidents |>
  filter(edat > 0.1) |> 
  ggplot(aes(x = edat, y = hora_dia)) +
  geom_point(position = position_jitter(width = 0.3),
             alpha = 0.3)
```

## Text {.scrollable}

Per abreviacions: `geom_text()` or `geom_label()`

```{r echo = T}
#| code-fold: true
festivals |> 
  group_by(ambit) |> 
  summarize(bcn = mean(assistents_a_barcelona, na.rm = T),
            fora = mean(assistents_fora_de_barcelona, na.rm = T)) |> 
  ggplot(aes(x = bcn, y = fora)) +
  geom_point() +
  geom_text(aes(label = ambit), position = position_nudge(x = 200,
                                                          y = 100)) +
  xlim(4000, 19000)
```

# Tres variables {background-color="#e8e8e8"}

## Tile {.scrollable}

Dues categòriques, una numèrica: `geom_tile()` 

```{r echo = T}
#| code-fold: true
accidents |> 
  count(hora_dia, descripcio_dia_setmana) |> 
  ggplot(aes(x = hora_dia, y = descripcio_dia_setmana, fill = n)) +
  geom_tile()
```

# Estadística descriptiva {background-color="#e8e8e8"}

## Mitjana i mediana {.scrollable}

Línies amb informació: `geom_vline()` o `geom_hline()`

```{r echo = T}
#| code-fold: true
municipi |> 
  ggplot(aes(x = superficie_km2)) +
  geom_density() +
  geom_vline(xintercept = mean(municipi$superficie_km2, na.rm = T),
             col = "blue") +
    geom_vline(xintercept = median(municipi$superficie_km2, na.rm = T),
             col = "green")
```

## Intervals de confiança

Amb `stat_summary()`

```{r echo = T}
#| code-fold: true
festivals |> 
  ggplot(aes(x = ambit, y = assistents_a_barcelona)) +
  geom_point(position = position_jitter(width = 0.1, height = 0)) +
  stat_summary(geom = "pointrange", fun.data = mean_se, col= "red", size = 0.8,
               fun.args = list(mult = 1.96)) +
  coord_flip()
```

