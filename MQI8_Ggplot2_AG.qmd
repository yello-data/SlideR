---
title: "Ggplot2 I"
subtitle: "Quantitative Methodology (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Quantitative Methodology (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Summary

- The layer system
- Aesthetics
- Geometries

# Warm up {background-color="#e8e8e8"}

## R learning curve

```{r}
library(dplyr)
library(ggplot2)
library(forcats)
theme_set(theme_minimal())
cens_gc <- readRDS("data/cens_gc.rds")
rendacs <- readRDS("data/rendacs.rds")
accidents <- readRDS("data/accidents.rds")
municipi <- readRDS("data/municipi.rds")
lloguer_any <- readRDS("data/lloguer_any.rds")
festivals <- readRDS("data/festivals.rds")
elecc19 <- readRDS("data/elecc19.rds")

rlc <- tibble(class = 1:8,
             knowledge = (1:8)^3)
class <- 6
plot(rlc$class, rlc$knowledge)
points(rlc$class[class], rlc$knowledge[class], col = "red")
```

## UPF Inclusive Growth Index (IGI)

```{r echo = T}
igi <- rendacs |>
  mutate(zs_gdp = (import_euros - mean(import_euros)) / sd(import_euros),
         zs_gini = (mean(index_gini) - index_gini) / sd(index_gini),
         upf_index = (zs_gdp + zs_gini) / 2) |> 
  select(nom_barri, secc = seccio_censal, zs_gdp:upf_index) |> 
  arrange(desc(upf_index))
head(igi, 10)
```

## UPF Inclusive Growth Index (IGI)

```{r echo = T}
tail(igi, 10)
```




## Made with ggplot

- [Visuals](https://www.jordimas.cat/courses/dataanalysis_en/visualize/data_analysis_en_visualization/){target="_blank"}
- [Extensions](https://exts.ggplot2.tidyverse.org/gallery/){target="_blank"}
- [Cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf){target="_blank"}

# The layer system {background-color="#e8e8e8"}

## Basic layers

Almost always, a ggplot consists of three layers^[Layers are separated by `+`, not by a pipe!!!!]:

- 1. Dataframe
- 2. Aesthetics
- 3. Geometry

```{r echo = T, eval = F}
df |> 
  ggplot(aes(aestethics)) +
  geometry()
```



## Optional layers

Optionally, we add more layers, such as:

- 4. Facet
- 5. Coordinates
- 6. Scale
- 7. Theme
- 8. Etc


## Layered example

Example of a full-equipped plot.

```{r echo = T, eval = F}
bins |> 
  ggplot(aes(x = pvote, y = n, fill = type)) +
  geom_bar(stat = "identity", show.legend = F) + 
  geom_hline(yintercept = 0, size = 0.3) +
  scale_fill_manual(values = c("grey65", "grey35")) +
  facet_share(~type, dir = "h", scales = "free", reverse_num = TRUE) +
  coord_flip() +
  labs(x = NULL, fill = NULL, y = "Vote") +
  theme(panel.background = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 16),
        text = element_text(size = 15),
        axis.line.x = element_line(size = 0.3),
        axis.title.x = element_text(vjust=125, size = 14))
```



# Aesthetics {background-color="#e8e8e8"}

## Cartesian coordinates

- `x` and `y`.

```{r echo = F, eval = T}
tibble(x = 1:100,
       y = 1:100) |> 
  ggplot(aes(x = x, y = y)) +
  theme_classic()
```


## Aesthetics {.scrollable}

Inside `aes()`, what is represented by a variable:

```{r echo = T, eval = F}
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point()
```


:::: {.columns}

::: {.column width="60%"}
```{r echo = F, eval = T}
rendacs |> 
  ggplot(aes(x = import_euros, y = index_gini, col = nom_districte)) +
  geom_point()
```

:::

::: {.column width="40%"}

- `x`: var horizontal axis.
- `y`: var vertical axis.
- `col`: geometry color.

:::

::::


## Aesthetics vs. attributes {.scrollable}

:::: {.columns}

::: {.column width="50%"}

Color as aesthetic
```{r echo = T}
rendacs |> 
  ggplot(aes(x = import_euros, 
             y = index_gini, 
             col = nom_districte)) +
  geom_point()
```

:::

::: {.column width="50%"}
Color as attribute
```{r echo = T}
rendacs |> 
  ggplot(aes(x = import_euros, 
             y = index_gini)) +
  geom_point(col = "red")
 
```
:::

::::



## Aesthetics vs. attributes {.scrollable}

**Aesthetics** represent a variable. Always within the `aes()` function. E.g.:

- `x = gdp`
- `col = continent`

**Attributes** represent characteristics of geometry. Outside the `aes()`, normally in the `geom_xxx()` function. E.g.:

- `col = "red"`
- `size = 2`


## Aesthetics vs. attributes {.scrollable}

Types of attributes:

- `size`: size of the geometry.
- `alpha`: transparency.
- `text`: names.
- `labels`: names.
- `fill`: For bars, polygons, and things to be painted.
- `shape`: Mostly for points.
- `linetype` / `lty`: For lines.


# Geometries {background-color="#e8e8e8"}

## Geometries

- `geom_bar()`
- `geom_col()`
- `geom_point()`
- `geom_boxplot()`
- `geom_smooth()`
- ... about 35 geometries!

# One categoric variable {background-color="#e8e8e8"}

## Bar plot (I) {.scrollable}

Counts, etc.: `geom_bar()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(x = nom_districte)) +
  geom_bar()
```


:::{.aside}
Extra: `coord_flip()`
:::

# One numeric variable {background-color="#e8e8e8"}

## Histogram {.scrollable}

Number of bins: `geom_histogram()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(x = hora_dia)) +
  geom_histogram(bins = 24)
```

:::{.aside}
Extra: `fill`
:::

## Density plot {.scrollable}

A lot of numeric data: `geom_density()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(x = hora_dia)) +
  geom_density()
```

:::{.aside}
Extra: `alpha`, `fill`, `col`
:::


## Dot plot {.scrollable}

Semi-continuous, few cases (~100): `geom_dotplot()`

```{r echo = T, fig.width=8, fig.height=5}
#| code-fold: true
accidents |> 
  filter(nom_barri == "el Camp de l'Arpa del Clot") |> 
  ggplot(aes(x = hora_dia)) +
  geom_dotplot()
```

:::{.aside}
Extra: `fill`.
:::


# Two categoric variables {background-color="#e8e8e8"}

## Bar plot (II) {.scrollable}

Bars are 'filled' with a C variable: `geom_bar()`

```{r echo = T}
#| code-fold: true
accidents |>
  ggplot(aes(x = nom_districte, fill = descripcio_torn)) +
  geom_bar(position = "fill")
```



# One categoric, one numeric {background-color="#e8e8e8"}


## Bar plot (III) {.scrollable}

A N variable (not a count) in the `y` axis: `geom_col()`

```{r echo = T}
#| code-fold: true
municipi |> 
  ggplot(aes(x = comarca, y = superficie_km2)) +
  geom_col()
```



## Boxplot (I) {.scrollable}

Displays the median and IQR: `geom_boxplot()`

```{r echo = T}
#| code-fold: true
accidents |> 
  ggplot(aes(y = edat)) +
  geom_boxplot()
```

:::{.aside}
Extra: `x`, `fill`
:::

## Boxplot (II) {.scrollable}

```{r echo = T}
#| code-fold: true
elecc19 |>
  filter(nombre_de_comunidad == "Andalucía") |> 
  mutate(cs_per = cs / poblacion * 100) |> 
  ggplot(aes(x = nombre_de_provincia, y = cs_per)) +
  geom_boxplot()
```

## Violin plot (I) {.scrollable}

Similar to density plot: `geom_violin()`

```{r echo = T}
#| code-fold: true
  elecc19 |>
  filter(nombre_de_comunidad == "Andalucía") |> 
  mutate(cs_per = cs / poblacion * 100) |> 
  ggplot(aes(x = fct_reorder(nombre_de_provincia, cs_per), y = cs_per)) +
  geom_violin() +
  coord_flip()
```


## Violin plot (II) {.scrollable}

```{r echo = T}
#| code-fold: true
rendacs |> 
  ggplot(aes(x = fct_reorder(nom_districte, import_euros), y = import_euros)) +
  geom_violin() +
  coord_flip()
```


## Points and text {.scrollable}

For percentages: `geom_point() + geom_text()`

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(nom_districte) |>
  summarize(preu_m2 = round(mean(preu_m2, na.rm = T), 1)) |> 
  ggplot(aes(x = fct_reorder(nom_districte, preu_m2), y = preu_m2)) +
  geom_point(size = 10, col = "darkblue") +
  geom_text(aes(label = preu_m2), col = "white") +
  coord_flip() +
  theme_minimal() +
  labs(x = NULL, y = NULL)
```



# Numerics in time {background-color="#e8e8e8"}

## Line plot (I) {.scrollable}

A timeline: `geom_line()`

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(any) |> 
  summarize(preu = mean(preu, na.rm = T)) |> 
  ggplot(aes(x = any, y = preu)) +
  geom_line()
```


## Line plot (II) {.scrollable}

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(any, nom_districte) |> 
  summarize(preu = mean(preu, na.rm = T)) |> 
  ggplot(aes(x = any, y = preu, col = nom_districte)) +
  geom_line()
```

:::{.aside}
Extra: `lty`
:::


## Line plot: Example 1

![](img/dcd-fem.png)

All the code can be found [here](https://www.jordimas.cat/courses/fiiei_cat/politics/fonts_indicadors_cat_binaria/#fig:fem-world){target="_blank"}



## Line plot: Example 2

![](img/demfall-gdp.png)
Article [here](https://www.jordimas.cat/post/2022-03-10-vdemfall/){target="_blank"} | Code [here](https://www.jordimas.cat/post/2022-03-10-vdemfall/index_files/figure-html/gdp-1.png){target="_blank"}



## Path (I) {.scrollable}

Two numerics across time: `geom_path()`

```{r echo = T}
#| code-fold: true
lloguer_any |> 
  group_by(any, nom_districte) |> 
  summarize(preu = mean(preu, na.rm = T),
            preu_m2 = mean(preu_m2, na.rm = T)) |> 
  ggplot(aes(x = preu_m2, y = preu, col = nom_districte,
             alpha = any)) +
  geom_path(size = 1.2)
```


## Path. Example {.scrollable}

![](img/kuznets-usa.png)

The code can be found [here](https://www.jordimas.cat/courses/fiiei_cat/socioeconomics/fonts_indicadors_cat_kuznets/#fig:kuznets-usa){target="_blank"}


# Two numerics {background-color="#e8e8e8"}

## Points (I) {.scrollable}

Two numeric variables: `geom_point()`

```{r echo = T}
#| code-fold: true
municipi |> 
  ggplot(aes(x = altitud_m, y = superficie_km2)) +
  geom_point()
```

:::{.aside}
Extra: `col`, `size`
:::



## Points (II)

```{r echo = T}
#| code-fold: true
accidents |> 
  filter(longitud > 0) |> 
  ggplot(aes(x = longitud, y = latitud)) +
  geom_point() 
```

## Jitter {.scrollable}

For discrete-numerics OR overplotting: `geom_jitter()` 

```{r echo = T}
#| code-fold: true
accidents |>
  filter(edat > 0.1) |> 
  ggplot(aes(x = edat, y = hora_dia)) +
  geom_point(position = position_jitter(width = 0.3),
             alpha = 0.3)
```

## Text {.scrollable}

Abbreviations: `geom_text()` or `geom_label()`

```{r echo = T}
#| code-fold: true
festivals |> 
  group_by(ambit) |> 
  summarize(bcn = mean(assistents_a_barcelona, na.rm = T),
            fora = mean(assistents_fora_de_barcelona, na.rm = T)) |> 
  ggplot(aes(x = bcn, y = fora)) +
  geom_point() +
  geom_text(aes(label = ambit), position = position_nudge(x = 200,
                                                          y = 100)) +
  xlim(4000, 19000)
```

# Three variables {background-color="#e8e8e8"}

## Tile {.scrollable}

Two categoric, one numeric: `geom_tile()` 

```{r echo = T}
#| code-fold: true
accidents |> 
  count(hora_dia, descripcio_dia_setmana) |> 
  ggplot(aes(x = hora_dia, y = descripcio_dia_setmana, fill = n)) +
  geom_tile()
```

# Descriptive statistics {background-color="#e8e8e8"}

## Mean and median {.scrollable}

Lines with info: `geom_vline()` or `geom_hline()`

```{r echo = T}
#| code-fold: true
municipi |> 
  ggplot(aes(x = superficie_km2)) +
  geom_density() +
  geom_vline(xintercept = mean(municipi$superficie_km2, na.rm = T),
             col = "blue") +
    geom_vline(xintercept = median(municipi$superficie_km2, na.rm = T),
             col = "green")
```

