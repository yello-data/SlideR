---
title: "Excel & R"
subtitle: "Quantitative Methodology (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Quantitative Methodology (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Summary

-   Types of data files
-   Excel Workflow
-   Collaborative spreadcheets
-   Dynamic tables in Excel
-   R Workflow
-   Objects in R
-   Functions in R

# Types of data files {background-color="#e8e8e8"}

## Types of data files

Plain files:

-   `.csv`, `.csv2`, `.tsv`, `.txt`.

Program files:

-   Excel: `.xlsx`, `.xls`.
-   R: `.Rdata`.
-   Stata: `.dta`.
-   SPSS: `.sav`, `.spss`.

## Types of data files {.scrollable}

Comma Separated Values (`csv`).

::: columns
::: {.column width="40%"}
-   Comas (`,`) separate variables.
-   Points (`.`) separate decimals.
:::

::: {.column width="60%"}
![](img/read_csv.png)
:::
:::

## Types of data files {.scrollable}

Comma Separated Values 2 (`csv`).

::: columns
::: {.column width="40%"}
-   Semi-colons (`;`) separate variables.
-   Commas (`,`) separate decimals.
:::

::: {.column width="60%"}
![](img/read_csv2.png)
:::
:::

## Types of data files {.scrollable}

Tab-Separated Values 2 (`tsv`).

::: columns
::: {.column width="40%"}
-   Tabulators (\ \ \ \ \ \ \ \ ) separate variables.
-   Points (`.`) separate decimals.
:::

::: {.column width="60%"}
![](img/read_tab.png)
:::
:::

## Types of data files {.scrollable}

Other delimiters (`txt`).

::: columns
::: {.column width="40%"}
-   Forward slash (`/`) separate variables.
-   Points (`.`) separate decimals.
:::

::: {.column width="60%"}
![](img/read_delim.png)
:::
:::

# Excel {background-color="#e8e8e8"}

## Excel workflow

-   Cells, columns files.
-   Reference a cell.
-   Import data.
-   Basic operations.
    -   Equal `=` symbol.
    -   Functions (AVERAGE, SUM, MAX, MIN).
    -   Scentific notation: E+16.
    -   Drag cells.
    -   Dollar `$` symbol to impeed draging cells.

## Collaborative spreadcheets

[World University Rankings 2023](https://www.timeshighereducation.com/world-university-rankings/2023/world-ranking#!/page/0/length/-1/sort_by/scores_overall/sort_order/asc/cols/scores) (Times Higher Education).

-   International students.
-   Ratio student per staff.
-   Female students.
-   Full Time Equivalent (FTE) students.

## Dynamic tables in Excel

Google Spreadsheets:

-   Data -\> Create a Filter.

Microsoft Excel

-   Insert -\> Table

# R {background-color="#e8e8e8"}

## RStudio workflow

1.  Create a project
2.  Four screens:

::: incremental
-   Files: `getwd()`, `dir()`
-   Console: `1:10`, `sample(1:10, 2)`, `d <- 1`
-   Script: `#`, `space`.
-   Environment: `objects()`, `ls()`, `search()`
:::

## Packages

-   **Install:** Once in a year.

```{r eval = F, echo = T}
install.packages(c("dplyr", "ggplot", "tidyr", 
                   "readr", "readxl", "haven", "foreign"))
```

-   **Load:** Everytime you join R.

```{r echo = T, message=F, warning=F}
library(dplyr)
library(ggplot2)
library(readr)
```

![](img/r-packages.png){style="float:center;" width="650"}

# R objects {background-color="#e8e8e8"}

## Objects (I)

- Values (A)
- Vectors (B)
- Dataframes (C)

![](img/intro-dataframe.png)

## Objects (II). General rules

General rules for creating objects:

- Can't start with a number.
- Can't contain: `^, !, $, @, +, -, /, *`.
- Overwrittes if saving with the same name. 
- Case sensitive.

## Objects (III). Values

- Numbers: Decimals with a dot (`.`).

```{r echo = T, eval = F}
1
5.9
4204455
```

- Character (*strings*): Case sensitive.

```{r echo = T, eval = F}
"D"
"Biden"
"Torroella de Mongrí"`
```

- Logical: Only two values.

```{r echo = T, eval = F}
TRUE
FALSE
```


## Objects (IV): Vectors {.scrollable}

::: {.callout-note icon="false"}
## Vector structure
A vector is formed by a chain of values.
It is created with the function `c()`.

    c(value1, value2, value3, value4...)

:::

- Numeric
```{r echo = T, eval = F}
numeric <- c(4, 5, 6, 7, 8)
num_dec <- c(54.98, 55.97, 76.58, 47.33, 82.24)
numeric / 2
num_dec / numeric
```

- Integer
```{r echo = T, eval = F}
integer_L <- c(3L, 6L, 7L, 5L, 9L)
integer_F <- as.integer(c(2022, 2021, 2021, 2021, 2020))
```

- Character
```{r echo = T, eval = F}
character <- c("Colombia", "Japan", "Germany", "Chile", "New Zealand")
mingle <- c("4$", "אַפֿגהאַניסטאַן", "البانیہ", "%%16", "漢字%3")
```

- Factor
```{r echo = T, eval = F}
factor <- factor(c("America", "Asia", "Europe", "America", "Oceania"))
```

- Logical

```{r echo = T, eval = F}
logic <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
```

- Data

```{r echo = T, eval = F}
date <- as.Date(c("2022/05/29", "2021/10/31", "2021/09/26", "2021/11/21", "2020/10/17"))
```




## Objects (V): Dataframes {.scrollable}

::: {.callout-note icon="false"}
## Dataframe structure
A dataframe is formed by several vectors.
It is created with the function `tibble()`.

    tibble(vector1, vector2, vector3, vector4...)
:::

Two ways of creating a dataframe:

1. Save the vectors, then create the df

``` {.r code-line-numbers="|8"}
country <- c("Colombia", "Japan", "Germany", "Chile", "New Zealand")
year <- as.integer(c(2022, 2021, 2021, 2021, 2020))
date <- as.Date(c("2022/05/29", "2021/10/31", "2021/09/26", "2021/11/21", "2020/10/17"))
turnout <- c(54.98, 55.97, 76.58, 47.33, 82.24)
continent <- factor(c("America", "Asia", "Europe", "America", "Oceania"))
presidential <- c(TRUE, FALSE, FALSE, TRUE, FALSE)

elections <- tibble(country, year, date, turnout, continent, presidential)
```


2. Do it all in the same procedure.

```{r echo = T}
elections <- tibble(country = c("Colombia", "Japan", "Germany", "Chile", "New Zealand"), 
                    year = as.integer(c(2022, 2021, 2021, 2021, 2020)), 
                    date = as.Date(c("2022/05/29", "2021/10/31", "2021/09/26", "2021/11/21", "2020/10/17")), 
                    turnout = c(54.98, 55.97, 76.58, 47.33, 82.24), 
                    continent = factor(c("Europe", "Asia", "Europe", "America", "Oceania")), 
                    presidential = c(TRUE, FALSE, FALSE, TRUE, FALSE))
```


## Objects (VI): Selection {.scrollable}

Vector in a dataframe
```{r echo = T, collapse=T}
elections$turnout
```

Use of brackets

```{r echo = T, collapse=T}
elections$turnout[1]
```


```{r echo = T, collapse=T}
elections$turnout[c(1,3)]
```


```{r echo = T, collapse=T}
elections[1,]
```


```{r echo = T, collapse=T}
elections[,c(1,4)]
```

```{r echo = T, collapse=T}
elections[elections$presidential,]
```

# R functions {background-color="#e8e8e8"}

## Functions (I)  {.scrollable}

::: {.callout-note icon="false"}
## Function structure
A function is formed by one or several arguments.
It is created with the function `function()`.

    function(argument1, argument2 ...)
:::

We can easily create a function:

```{r echo = T, collapse=T}
per_four <- function(x) {x * 4}
```

And apply it to any object:

```{r echo = T, collapse=T}
per_four(2) #to a value
per_four(elections$turnout) #to a vector
```


## Functions (II): Import functions 

- Package `readr`.

```{r eval = F, echo = T}
read_csv("files/gapminder.csv")
read_csv2("files/gapminder2.csv")
read_tsv("files/gapminder3.tsv")
read_delim("files/gapminder4.txt", delim = "/")
```

- Other packages:

```{r eval = F, echo = T}
tibble(foreign::read.dta("files/gapminder5.dta"))
load("files/gapminder6.Rdata")
tibble(read.spss("files/gapminder7.sav", to.data.frame = T))
```


## Functions (III): With one argument

Applied normally to a dataframe:

```{r echo = T, eval = F}
glimpse()
dim()
summary()
```

Applied normally to a vector:

```{r echo = T, eval = F}
#to a character vector
unique()
table()

#to a numeric vector
mean() 
hist()
```

## Functions (IV): With many arguments  {.scrollable}

::: {.callout-note icon="false"}
## Help!
R is impossible to use without help.

- Use `?` before a function: e.g. `?sample`.
- Use Google.
- Use Cheet Sheats: e.g. [Dplyr](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf).
- Use Stackoverflow.
:::

Some functions with (normally) more than one argument:
```
sample()
seq()
rep()
```




## Functions (IV): Without arguments  {.scrollable}

Normally, when they are related to the working environment.
```
ls()
installed.packages()
search()
getwd()
```


## Import data to Rv

## Vectors and data frames in R

## Objects and functions in R
