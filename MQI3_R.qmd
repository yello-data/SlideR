---
title: "R"
subtitle: "Metodologia Quantitativa I (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Metodologia Quantitativa I (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Sumari

-   R Workflow
-   Objectes d'R
-   Funcions d'R
-   Tipus d'arxius

## Warm up

Paint the fence, first...

![](img/paint_fence.jpeg)

## Warm up

...karate later.

![](img/karate-practice.gif)


# R {background-color="#e8e8e8"}

## Passos inicials

- Crear projecte
- Situar-se a RStudio
- Instal·lar paquets
- Carregar paquets
- Importar arxius
- Comprovar Environment


## RStudio workflow

-   **Instal·lar paquets:** Un cop l'any.

```{r eval = F, echo = T}
install.packages(c("dplyr", "ggplot2", "tidyr", 
                   "readr", "readxl", "haven", "foreign"))
```

-   **Carregar paquets:** Cada vegada que entrem a RStudio.

```{r echo = T, message=F, warning=F}
library(dplyr)
library(ggplot2)
library(readr)
```

![](img/r-packages.png){style="float:center;" width="650"}



# Objectes d'R {background-color="#e8e8e8"}

## Objectes

- A. Valors
- B. Vectors: `c(value1, value2, value3, ...)`
- C. Marcs de dades: `tibble(vector1, vector2, ...)`

![](img/intro-dataframe.png)


## Objectes. Regles generals

Regles generals per crear objectes:

- No començar amb un nombre.
- No pot contenir: `^, !, $, @, +, -, /, *`.
- Sobrescriu, si guardem amb el mateix nom. 
- Sensible a majúscules.

## Objectes. Vectors {.smaller}


| Classe   | Tipus    | Exemple                                                |
|------------|-------------|-----------------------------------------------|
| Character | Character | `c("b", "c", "d")`                                     |
| Factor    | Integer    | `factor(c("b", "c", "d"))`                             |
| Integer   | Integer    | `c(10L, 6L, 12L)`                                      |
| Numeric   | Double    | `c(1.1, 3.5, 10.2)`                                    |
| Data      | Double    | `as.Date(c("2019/06/04", "2019/11/02", "2020/01/23"))` |
| Logical   | Logical    | `c(FALSE, TRUE, FALSE)`                                |

: Classe i tipus de vector {#tbl-types-vector}



## Objectes. Regles 

- Tots els valors d'un vector han de ser del mateix tipus.
- Tots els vectors en un marc de dades han de tenir la mateixa longitud.
- Els valors d'un vector es seleccionen amb `[ ]`.
- Les files i columnes en un md es seleccionen amb `[ , ]`

## Exercici

::: {.callout-tip icon="false"}
## CHES Latin America
Llibre de codis disponible [aquí](https://www.chesdata.eu/chesla){target="_blank"}.

- Fes una ullada (`glimpse()`) a `ches_la` object.
- Quins països tenim al _dataset_?
- Selecciona `Colombia` i crea un objecte nou que es digui `ches_co`.
- Torna a fer una ullada al nou _dataset_ (quantes observacions?).
- Selecciona variables de partit + lrecon, galtan, crime, regions, ethnic_minorities.
- Sobreescriu l'objecte `ches_co` amb la transformació.
:::

# Funcions {background-color="#e8e8e8"}

## Funcions (I): Regles generals {.scrollable}

Regles generals per utilitzar funcions:

- Poden tenir varis arguments.
  - `function(argument1, argument2 ...)`
- Normalment, el primer argument és un vector o un marc de dades.
- Totes les funcions tenen un menú d'ajuda (`?funció`).



## Funcions (II): Sense arguments  {.scrollable}

Normalment, quan fem alguna cosa relacionada amb el directori de treball.
```{r echo = T, eval = F}
ls()
installed.packages()
search()
getwd()
```




## Funcions (III): Amb un argument

Aplicades normalment a un marc de dades:

```{r echo = T, eval = F}
glimpse()
dim()
summary()
```

Aplicades normalment a un vector:

```{r echo = T, eval = F}
#vector de caràcter
unique()
table()

#vector numèric
mean() 
hist()
```

## Funcions (IV): Amb molts arguments  {.scrollable}

::: {.callout-tip icon="false"}
## Exercici: Funcions

```{r echo = T, eval = F}
sample()
seq()
rep()
```
:::

::: {.callout-note icon="false"}
## Ajuda!
Fer servir R és impossible sense ajuda.

- Utilitza `?` abans d'una funció: e.g. `?sample`.
- Cheet Sheats (see [Posit website](https://posit.co/resources/cheatsheets/){target="_blank"}).
- Utilitza [Stackoverflow](https://stackoverflow.com/){target="_blank"}.
- Utilitza ChatGPT.
- Utilitza Google.
:::





# Importar dades {background-color="#e8e8e8"}

## Funcions d'importació

```{r import, echo = FALSE, message = FALSE, warning = FALSE}
library(dplyr)
tribble(
  ~`File type`, ~Package, ~Functions,
  "csv",   "readr", "read_csv() o read_csv2()",
  "xls",   "readxl", "read_xls()",
  "xlsx",   "readxl", "read_xlsx()",
  "dta",   "foreign", "read.dta()",
  "dta",   "haven", "read_dta()",
  "sav", "haven", "read_sav()",
  "spss", "haven", "read_spss()") %>% 
  knitr::kable()
```



## Funcions d'importació

- Paquet `readr`.

```{r eval = F, echo = T}
read_csv("data/gapminder.csv")
read_csv2("data/gapminder2.csv")
read_tsv("data/gapminder3.tsv")
read_delim("data/gapminder4.txt", delim = "/")
```

- Altres paquets:

```{r eval = F, echo = T}
tibble(foreign::read.dta("data/gapminder5.dta"))
load("data/gapminder6.Rdata")
tibble(foreign::read.spss("data/gapminder7.sav", to.data.frame = T))
read_xlsx("data/gapminder8.xlsx", sheet = 2)
```
