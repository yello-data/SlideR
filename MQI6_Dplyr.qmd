---
title: "Dplyr"
subtitle: "Quantitative Methodology (UPF)"
author: "Jordi Mas Elias"
institute: "<https://www.jordimas.cat/>"
footer: "Quantitative Methodology (UPF)"
logo: logo-upf.png
format: 
  revealjs:
    embed-resources: true
    slide-number: true
    show-slide-number: print
    theme: simple
editor: source
editor_options: 
  chunk_output_type: console
---

## Summary

- Pipe
- Row dplyr functions
- Column dplyr functions
- Transform variables

# Warm up {background-color="#e8e8e8"}

## R learning curve

```{r}
library(dplyr)
rlc <- tibble(class = 1:8,
             knowledge = (1:8)^3)
class <- 4
plot(rlc$class, rlc$knowledge)
points(rlc$class[class], rlc$knowledge[class], col = "red")
```

## RStudio workflow

**Load packages.**

```{r echo = T, message=F, warning=F}
library(dplyr)
library(ggplot2)
library(stringr)
```

![](img/r-packages.png){style="float:center;" width="650"}



# Pipe {background-color="#e8e8e8"}

## Pipe

One function
```{r eval = F, echo = TRUE}
#| code-line-numbers: "|1|2|3|4-5"
f(d$v)
f(d, v)
d |> f(v)
1:100 |> 
   sample(4)
```

Various functions
```{r eval = F, echo = TRUE}
#| code-line-numbers: "|1|2-4"
f1(f1(d, v1), v2)
d |> 
  f1(v1) |> 
  f2(v2)
```



## Pipe

Without pipe
```{r eval = F, echo = TRUE}
go_to_upf(take_transport(get_dressed(get_out_of_bed(wake_up(me,
time = "8:30"), side = "left"), pants = TRUE, shirt = TRUE), 
bus = TRUE, metro = FALSE), mqi = FALSE, bar = TRUE)
```

With pipe

```{r eval = F, echo = TRUE}
me |> 
  wake_up(time = "8:30") |> 
  get_out_of_bed(side = "left") |> 
  get_dressed(pants = TRUE, shirt = TRUE) |> 
  take_transport(bus = TRUE, metro = FALSE) |> 
  go_to_upf(mqi = FALSE, bar = TRUE)
```

Example taken from [here](https://twitter.com/hadleywickham/status/1359852563726819332?s=20&t=J8qesZb3u9EAwVKMYMgh1Q) and [here](https://evalsp21.classes.andrewheiss.com/projects/01_lab/slides/01_lab.html#116).


# Row dplyr functions {background-color="#e8e8e8"}

## Filter

Reduces the number of rows according to a certain criteria

```{r echo = T, eval = F}
df |> 
  filter(logic_vector)
```

- Always is the result of a logic vector.
- Can use `&` (AND), `|` (OR), `!` (NOR).


## Arrange

- Arranges from less to more...

```{r echo = T, eval = F}
df |> 
  arrange(vector)
```

- ...or from more to less.

```{r echo = T, eval = F}
df |> 
  arrange(desc(vector))
```

## Count

- Counts the number of categories in a vector^[This vector is usually a character vector or a factor, but it can be another vector with few categories.]...

```{r echo = T, eval = F}
df |> 
  count(vector)
```

- ...and orders the results.

```{r echo = T, eval = F}
df |> 
  count(vector, sort = T)
```


# Column dplyr functions {background-color="#e8e8e8"}

## Select

- Selects vectors.

```{r echo = T, eval = F}
df |> 
  select(vector1, vector4, vector6:vector9)
```

- Removes vectors.

```{r echo = T, eval = F}
df |> 
  select(-vector2)
```

## Rename

Renames the vector.

```{r echo = T, eval = F}
df |> 
  rename(new_name = Old.Vector.Name)
```



## Mutate {.scrollable}

- Modifies the values of a vector^[It modifies the value of the vector because it saves the operation in the same vector.]...

```{r echo = T, eval = F}
df |> 
  mutate(vector5 = vector5 * 100)
```

- ... or creates a new vector^[It creates a new vector since the operation is saved in a vector that does not currently exist in the dataframe.].

```{r echo = T, eval = F}
df |> 
  mutate(new_vector = vector5 + vector6)
```

- Several operations can be combined.

```{r echo = T, eval = F}
df |> 
  mutate(vector5 = vector5 * 100,
         new_vector = vector5 + vector6)
```


## Summarize

- Summarizes data.

```{r echo = T, eval = F}
df |> 
  summarize(name = sum(vector))
```

- Different elements can be summarized:

```{r echo = T, eval = F}
df |> 
  summarize(name1 = sum(vector),
            name2 = mean(vector),
            n = n())
```

*Mind the argument `na.rm = T`.


## Group_by   

- Always combined with another function (e.g. `summarize`, `filter`, `mutate`), it groups the data by the values of a vector^[This vector is usually a character vector or a factor, but it can be another vector with few categories.]...

```{r echo = T, eval = F}
df |> 
  group_by(vector) |> 
  summarize(name1 = sum(vector))
```

*With group_by and summarize, we change the __unit of observation__ of the dataset.


# Recoding vectors {background-color="#e8e8e8"}

## Recoding

When we recode variables (vectors), we lose information.

| Destí      | Funció                                          |
|------------|-------------------------------------------------|
| Binària    | `if_else()`                                     |
| Categòrica | `case_when()`                                   |
| Ordinal    | `factor()`                                      |
| Qualsevol  | `recode()`                                      |
| Altres     | `as.numeric()`, `as.character()`, `as.Date()`, etc. |


## Boolean operators


- **AND** (`&`): TRUE if all conditions are met.
- **OR** (`|`): TRUE if any condition is met.
- **NOT** (`!`): TRUE if conditions are not met.

```{r echo = FALSE}
#| fig-column: margin
knitr::include_graphics("img/booleans.png")
```



## If_else

- To a dichotomous / binary / dummy variable.

```{r echo = T, eval = F}
df |> 
  mutate(new_name = if_else(logic operation, true, false))
```




## Case_when

```{r echo = T, eval = F}
case_when(logic operation ~ "C1"
          logic operation ~ "C2",
          logic operation ~ "C3",
          ...,
          TRUE ~ "CN")
```



## Factor

```{r echo = T, eval = F}
df |> 
  mutate(new_vector = factor(wb$income_group, 
                             ordered = TRUE,
                             [levels o labels = ...]))
```


## Recode

```{r echo = T, eval = F}
df |> 
  mutate(new_vector = recode(vector, 
                             old_value = "new_value"))
```

## As functions

- `as.numeric(vector)`
- `as.factor(vector)`
- `as.character(vector)`
- `as.integer(vector)`
- `as.Date(vector)`



